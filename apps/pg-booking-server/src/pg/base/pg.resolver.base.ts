/*
------------------------------------------------------------------------------ 
This code was generated by Amplication. 
 
Changes to this file will be lost if the code is regenerated. 

There are other ways to to customize your code, see this doc to learn more
https://docs.amplication.com/how-to/custom-code

------------------------------------------------------------------------------
  */
import * as graphql from "@nestjs/graphql";
import { GraphQLError } from "graphql";
import { isRecordNotFoundError } from "../../prisma.util";
import { MetaQueryPayload } from "../../util/MetaQueryPayload";
import { Pg } from "./Pg";
import { PgCountArgs } from "./PgCountArgs";
import { PgFindManyArgs } from "./PgFindManyArgs";
import { PgFindUniqueArgs } from "./PgFindUniqueArgs";
import { CreatePgArgs } from "./CreatePgArgs";
import { UpdatePgArgs } from "./UpdatePgArgs";
import { DeletePgArgs } from "./DeletePgArgs";
import { BookingFindManyArgs } from "../../booking/base/BookingFindManyArgs";
import { Booking } from "../../booking/base/Booking";
import { PgService } from "../pg.service";
@graphql.Resolver(() => Pg)
export class PgResolverBase {
  constructor(protected readonly service: PgService) {}

  async _pgsMeta(@graphql.Args() args: PgCountArgs): Promise<MetaQueryPayload> {
    const result = await this.service.count(args);
    return {
      count: result,
    };
  }

  @graphql.Query(() => [Pg])
  async pgs(@graphql.Args() args: PgFindManyArgs): Promise<Pg[]> {
    return this.service.pgs(args);
  }

  @graphql.Query(() => Pg, { nullable: true })
  async pg(@graphql.Args() args: PgFindUniqueArgs): Promise<Pg | null> {
    const result = await this.service.pg(args);
    if (result === null) {
      return null;
    }
    return result;
  }

  @graphql.Mutation(() => Pg)
  async createPg(@graphql.Args() args: CreatePgArgs): Promise<Pg> {
    return await this.service.createPg({
      ...args,
      data: args.data,
    });
  }

  @graphql.Mutation(() => Pg)
  async updatePg(@graphql.Args() args: UpdatePgArgs): Promise<Pg | null> {
    try {
      return await this.service.updatePg({
        ...args,
        data: args.data,
      });
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.Mutation(() => Pg)
  async deletePg(@graphql.Args() args: DeletePgArgs): Promise<Pg | null> {
    try {
      return await this.service.deletePg(args);
    } catch (error) {
      if (isRecordNotFoundError(error)) {
        throw new GraphQLError(
          `No resource was found for ${JSON.stringify(args.where)}`
        );
      }
      throw error;
    }
  }

  @graphql.ResolveField(() => [Booking], { name: "bookings" })
  async findBookings(
    @graphql.Parent() parent: Pg,
    @graphql.Args() args: BookingFindManyArgs
  ): Promise<Booking[]> {
    const results = await this.service.findBookings(parent.id, args);

    if (!results) {
      return [];
    }

    return results;
  }
}
